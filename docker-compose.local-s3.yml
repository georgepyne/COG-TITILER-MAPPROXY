x-minio-environment: &minio-environment
  MINIO_ROOT_USER: miniouser
  AWS_ACCESS_KEY_ID: miniouser
  MINIO_ROOT_PASSWORD: miniopassword
  AWS_SECRET_ACCESS_KEY: miniopassword
  MINIO_HTTP_TRACE: /dev/stdout

services:
  minio:
    image: minio/minio:RELEASE.2024-06-11T03-13-30Z
    command: server /data --console-address ":9001"
    environment:
      <<: *minio-environment
    ports:
      - "9000:9000"
      - "9001:9001"
      - "9001:9001"
    healthcheck:
      test: curl --fail http://localhost:9001
      interval: 1s
      timeout: 1s
      retries: 3

  minio-sample-loader:
    image: minio/mc:RELEASE.2024-06-12T14-34-03Z
    entrypoint: /bin/bash /entrypoint.sh
    environment:
      <<: *minio-environment
    volumes:
      - "./docker/minio/mc/entrypoint.sh:/entrypoint.sh:ro"
      - "./data/STAC/sample/data/:/stac/sample:ro"
      - "./data/COG/sample/data/:/cog/sample:ro"
    depends_on:
      minio:
        condition: service_healthy
    command: mc cp --recursive /stac/sample minio/stac ; mc cp --recursive /cog/sample minio/cog

  titiler:
    build:
      dockerfile: docker/titiler/Dockerfile
      context: .
    image: ghcr.io/developmentseed/titiler:latest
    ports:
      - "8000:8000"
    environment:
      - AWS_ACCESS_KEY_ID=miniouser
      - AWS_SECRET_ACCESS_KEY=miniopassword
      - AWS_S3_ENDPOINT=minio:9000
      - PORT=8000
      - WORKERS_PER_CORE=3
      - LOG_LEVEL=debug
      - TIMEOUT=240
      - FORWARDED_ALLOW_IPS="*"
      - CPL_TMPDIR=/tmp
      - GDAL_CACHEMAX=75%
      - GDAL_INGESTED_BYTES_AT_OPEN=32768
      - GDAL_DISABLE_READDIR_ON_OPEN=EMPTY_DIR
      - GDAL_HTTP_MERGE_CONSECUTIVE_RANGES=YES
      - GDAL_HTTP_MULTIPLEX=YES
      - GDAL_HTTP_VERSION=2
      - PYTHONWARNINGS=ignore
      - VSI_CACHE=TRUE
      - VSI_CACHE_SIZE=536870912
      - TITILER_API_DISABLE_STAC=FALSE
      - TITILER_API_DISABLE_MOSAIC=FALSE
      - TITILER_API_DISABLE_COG=FALSE
      - TITILER_API_CORS_ORIGIN=*
      - TITILER_API_CACHECONTROL=public, max-age=3600
      - TITILER_API_DEBUG=TRUE

  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel verbose --requirepass guiyguwqgdilxkajxkha73qa
#    volumes:
#        - cache:/data

  mapproxy:
    build:
      dockerfile: docker/mapproxy/Dockerfile
      context: .
    image: ghcr.io/mapproxy/mapproxy/mapproxy:2.1.1-dev
#    command: ./app/entrypoint.sh
    volumes:
      - "./docker/titiler/mapproxy.yaml:/mapproxy/config/mapproxy.yaml:rw"
    ports:
        - "8080:8080"

